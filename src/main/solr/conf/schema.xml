<?xml version="1.0" encoding="UTF-8" ?>
<schema name="example" version="1.5">
    <field name="_version_" type="long"   indexed="true" stored="true"/>
    <field name="_root_"    type="string" indexed="true" stored="false"/>

    <!-- Only remove the "id" field if you have a very good reason to. While not strictly
      required, it is highly recommended. A <uniqueKey> is present in almost all Solr
      installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
    -->
    <field name="id"   type="string" indexed="true" stored="true" required="true" multiValued="false" />
    <field name="popularity" type="int"                     indexed="true" stored="true" />
    <field name="name"       type="text_general"            indexed="true" stored="true"/>
    <!--
       <field name="features"   type="text_general"            indexed="true" stored="true" multiValued="true"/>
       <field name="includes"   type="text_general"            indexed="true" stored="true" termVectors="true" termPositions="true" termOffsets="true" />
    -->
    <!-- 資料別 (管理番号 A150001-001)-->
    <field name="doc_code"           type="string" indexed="true" stored="true"/>

    <!-- 資料別 (A:提案資料/B:技術資料/C:設定資料/D:手順資料/E:業務窓口)-->
    <field name="doc_category"       type="string" indexed="true" stored="true"/>

    <!-- ドキュメント種類 (1:提案書/2:技術書/3:設定書/4:マニュアル/5:仕様書/6:事例集/7:手順書/99:その他) -->
    <field name="doc_purpose"        type="int" indexed="true" stored="true"/>

    <!-- 分野 (小学校/中学校/高校/大学/公共/金融/産業/その他)-->
    <field name="doc_area"           type="int" indexed="true" stored="true"/>

    <!-- ファイル名 -->
    <field name="doc_file_name"      type="text_general" indexed="true"  stored="true"/>

    <!-- 成否 -->
    <field name="doc_result"         type="int" indexed="true" stored="true"/>

    <!-- 成否要因 -->
    <field name="doc_reason"         type="int" indexed="true" stored="true"/>

    <!-- 部署名 -->
    <field name="doc_dept_name"      type="text_ja" indexed="true" stored="true"/>

    <!-- 従業員番号 -->
    <field name="doc_emp_number"     type="string"  indexed="true" stored="true"/>

    <!-- 担当者名 -->
    <field name="doc_author_name"    type="text_ja" indexed="true" stored="true"/>

    <!-- 発行年月日 -->
    <field name="doc_publish_date"   type="tdate"   indexed="true" stored="true"/>

    <!-- 登録年月日 -->
    <field name="doc_register_date"  type="tdate"   indexed="true" stored="true"/>

    <!-- コメント -->
    <field name="doc_description"    type="text_ja" indexed="true" stored="true"/>

    <!-- 顧客名 -->
    <field name="doc_customer_name"  type="text_ja" indexed="true" stored="true"/>

    <!-- 無効-->
    <field name="doc_disabled"       type="boolean" indexed="true" stored="true" />

    <!-- ページ数 -->
    <field name="doc_page_count"     type="long"    indexed="true" stored="true"/>

    <!-- SolrCell metadata when parsing rich documents such as Word, PDF.
      Some fields are multiValued only because Tika currently may return
      multiple values for them. Some metadata is parsed from the documents,
      but there are some which come from the client context:
        "content_type": From the HTTP headers of incoming stream
        "resourcename": From SolrCell request param resource.name
    -->
    <field name="title"         type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <field name="dc_title"      type="text_general" indexed="true"  stored="true" multiValued="true"/>
    <field name="subject"       type="text_general" indexed="true"  stored="true"/>
    <field name="description"   type="text_general" indexed="true"  stored="true"/>
    <field name="comments"      type="text_general" indexed="true"  stored="true"/>
    <field name="author"        type="text_general" indexed="true"  stored="true"/>
    <field name="keywords"      type="text_general" indexed="true"  stored="true"/>
    <field name="category"      type="text_general" indexed="true"  stored="true"/>
    <field name="resourcename"  type="text_general" indexed="true"  stored="true"/>
    <field name="url"           type="text_general" indexed="true"  stored="true"/>
    <field name="content_type"  type="string"       indexed="true"  stored="true" multiValued="true"/>
    <field name="last_modified" type="date"         indexed="true"  stored="true"/>
    <field name="_src_"         type="string"       indexed="false" stored="true"/>

    <!-- 追加分 -->
    <field name="stream_name"    type="text_general" indexed="true"  stored="true"/>
    <field name="stream_size"    type="long"         indexed="true"  stored="true"/>
    <field name="stream_content_type"  type="string" indexed="true"  stored="true" multiValued="true"/>

    <field name="x_parsed_by"   type="text_general" indexed="false" stored="true" multiValued="true"/>

    <field name="application_name" type="text_general" indexed="true"  stored="true"/>
    <field name="meta"             type="string"   indexed="false"  stored="false" multiValued="true"/>

    <!-- WORD用 -->
    <field name="links" type="string" indexed="false" stored="false" multiValued="true"/>
    <field name="p"     type="string" indexed="false" stored="false" multiValued="true"/>
    <field name="h1"    type="string" indexed="false" stored="false"/>
    <field name="h2"    type="string" indexed="false" stored="false"/>

    <field name="total_time"           type="long" indexed="false" stored="true"/>
    <field name="word_count"           type="long" indexed="false" stored="true"/>
    <field name="meta_word_count"      type="long" indexed="false" stored="false"/>
    <field name="line_count"           type="long" indexed="false" stored="true"/>
    <field name="meta_line_count"      type="long" indexed="false" stored="false"/>
    <field name="paragraph_count"      type="long" indexed="false" stored="true"/>
    <field name="meta_paragraph_count" type="long" indexed="false" stored="false"/>
    <field name="character_count"      type="long" indexed="false" stored="true"/>
    <field name="meta_character_count" type="long" indexed="false" stored="false"/>
    <field name="page_count"           type="long" indexed="true"  stored="true"/>
    <field name="meta_page_count"      type="long" indexed="false" stored="false"/>
    <field name="character_count_with_spaces"      type="long" indexed="false" stored="true"/>
    <field name="meta_character_count_with_spaces" type="long" indexed="false" stored="true"/>

    <!-- PDF用 -->
    <field name="pdf_pdfversion"  type="string"  indexed="false" stored="true" />
    <field name="xmp_creatortool" type="string"  indexed="false" stored="true" />
    <field name="dc_description"  type="string"  indexed="false" stored="true" />
    <field name="dc_format"       type="string"  indexed="false" stored="true" />
    <field name="pdf_encrypted"   type="boolean" indexed="false" stored="true" />
    <field name="trapped"         type="boolean" indexed="false" stored="true" />
    <field name="producer"        type="string"  indexed="false" stored="true" />
    <field name="xmptpg_npages"   type="long"    indexed="false" stored="true" />


    <!-- 作成者 -->
    <field name="creator"          type="text_general" indexed="false" stored="false"/>
    <field name="dc_creator"       type="text_general" indexed="false" stored="false"/>
    <field name="meta_creator"     type="text_general" indexed="false" stored="false"/>
    <field name="meta_author"      type="text_general" indexed="false" stored="false"/>

    <!-- 更新者 -->
    <field name="last_author"      type="text_general" indexed="false" stored="false"/>
    <field name="meta_last_author" type="text_general" indexed="false" stored="false"/>

    <!-- 作成日 -->
    <field name="creation_date"      type="date" indexed="false" stored="false"/>
    <field name="meta_creation_date" type="date" indexed="false" stored="false"/>
    <field name="created"            type="date" indexed="false" stored="false"/>
    <field name="dcterms_created"    type="date" indexed="false" stored="false"/>
    <field name="meta_save_date"     type="date" indexed="false" stored="false"/>

    <!-- 最終更新日 -->
    <field name="date"               type="date" indexed="false" stored="false"/>
    <field name="modified"           type="date" indexed="false" stored="false"/>
    <field name="last_save_date"     type="date" indexed="false" stored="false"/>
    <field name="dcterms_modified"   type="date" indexed="false" stored="false"/>

    <!-- 印刷日 -->
    <field name="last_printed"       type="date" indexed="false" stored="false"/>
    <field name="meta_print_date"    type="date" indexed="false" stored="false"/>

    <!-- ドキュメント内容 -->
    <field name="content" type="text_ja" indexed="true" stored="true" multiValued="true"/>


    <!-- catchall field, containing all other searchable text fields (implemented
          via copyField further on in this schema -->
    <field name="text"     type="text_ja"  indexed="true" stored="false" multiValued="true"/>
    <field name="text_cjk" type="text_cjk" indexed="true" stored="false" multiValued="true"/>


    <!-- catchall text field that indexes tokens both normally and in reverse for efficient
         leading wildcard queries. -->
    <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>

    <field name="payloads" type="payloads"     indexed="true" stored="true"/>


    <!--
      Some fields such as popularity and manu_exact could be modified to
      leverage doc values:
      <field name="popularity" type="int" indexed="true" stored="true" docValues="true" />


      Although it would make indexing slightly slower and the index bigger, it
      would also make the index faster to load, more memory-efficient and more
      NRT-friendly.
      -->

    <!-- Dynamic field definitions allow using convention over configuration
        for fields via the specification of patterns to match field names.  -->

    <dynamicField name="*_s"   type="string"       indexed="true"  stored="true" />

    <dynamicField name="*_dt"  type="date"         indexed="true"  stored="true"/>
    <dynamicField name="*_dts" type="date"         indexed="true"  stored="true" multiValued="true"/>

    <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
    <dynamicField name="attr_*" type="text_general" indexed="false" stored="true" multiValued="true"/>

    <!-- uncomment the following to ignore any fields that don't already match an existing
         field name or dynamic field, rather than reporting them as an error.
         alternately, change the type="ignored" to some other type e.g. "text" if you want
         unknown fields indexed and/or stored by default -->
    <!--dynamicField name="*" type="ignored" multiValued="true" /-->




    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>id</uniqueKey>

    <!-- Text fields from SolrCell to search by default in our catch-all field  -->
    <copyField source="content"           dest="text"/>
    <copyField source="doc_code"          dest="text"/>
    <copyField source="doc_file_name"     dest="text"/>
    <copyField source="doc_dept_name"     dest="text"/>
    <copyField source="doc_author_name"   dest="text"/>
    <copyField source="doc_emp_number"    dest="text"/>
    <copyField source="doc_customer_name" dest="text"/>
    <copyField source="doc_description"   dest="text"/>
    <!--
        <copyField source="content"           dest="text_cjk"/>
        <copyField source="doc_file_name"     dest="text_cjk"/>
        <copyField source="doc_author_name"   dest="text_cjk"/>
        <copyField source="doc_customer_name" dest="text_cjk"/>
        <copyField source="doc_description"   dest="text_cjk"/>
    -->
    <!-- ページ数のフィールド統一
    <copyField source="page_count"    dest="doc_page_count"/>
    <copyField source="xmptpg_npages" dest="doc_page_count"/>-->

    <!-- Create a string version of author for faceting -->
    <copyField source="author" dest="author_s"/>

    <!-- Above, multiple source fields are copied to the [text] field.
       Another way to map multiple source fields to the same
       destination field is to use the dynamic field syntax.
       copyField also supports a maxChars to copy setting.  -->

    <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

    <!-- copy name to alphaNameSort, a field designed for sorting by name -->
    <!-- <copyField source="name" dest="alphaNameSort"/> -->


    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
       This includes "string","boolean", and, as of 3.5 (and 4.x),
       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>


    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
   removes stop words from case-insensitive "stopwords.txt"
   (empty by default), and down cases.  At query time only, it
   also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
            -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
                    />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
            -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
            -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus
   aggressive word-splitting and autophrase features enabled.
   This field is just like text_en, except it adds
   WordDelimiterFilter to enable splitting and matching of
   words on case-change, alpha numeric boundaries, and
   non-alphanumeric chars.  This means certain compound word
   cases will work, for example query "wi fi" will match
   document "WiFi" or "wi-fi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
            -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
                    />
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="lang/stopwords_en.txt"
                    />
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of
   each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
                    maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer>
            <!-- KeywordTokenizer does no actual tokenizing, so the entire
                 input string is preserved as a single token
              -->
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!-- The LowerCase TokenFilter does what you expect, which can be
                 when you want your sorting to be case insensitive
              -->
            <filter class="solr.LowerCaseFilterFactory" />
            <!-- The TrimFilter removes any leading or trailing whitespace -->
            <filter class="solr.TrimFilterFactory" />
            <!-- The PatternReplaceFilter gives you the flexibility to use
                 Java Regular expression to replace any sequence of characters
                 matching a pattern with an arbitrary replacement string,
                 which may include back references to portions of the original
                 string matched by the pattern.

                 See the Java Regular Expression documentation for more
                 information on pattern and replacement string syntax.

                 http://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html
              -->
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="([^a-z])" replacement="" replace="all"
                    />
        </analyzer>
    </fieldType>

    <fieldType name="phonetic" stored="false" indexed="true" class="solr.TextField" >
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
        </analyzer>
    </fieldType>

    <fieldType name="payloads" stored="false" indexed="true" class="solr.TextField" >
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!--
            The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
            a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
            Attributes of the DelimitedPayloadTokenFilterFactory :
             "delimiter" - a one character delimiter. Default is | (pipe)
         "encoder" - how to encode the following value into a playload
            float -> org.apache.lucene.analysis.payloads.FloatEncoder,
            integer -> o.a.l.a.p.IntegerEncoder
            identity -> o.a.l.a.p.IdentityEncoder
                Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
             -->
            <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
        </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />
        </analyzer>
    </fieldType>

    <!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType name="descendent_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
        </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- some examples for different languages (generally ordered by ISO code) -->

    <!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->
    <fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- normalize width before bigram, as e.g. half-width dakuten combine  -->
            <filter class="solr.CJKWidthFilterFactory"/>
            <!-- for any non-CJK -->
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.CJKBigramFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming)

         NOTE: If you want to optimize search for precision, use default operator AND in your query
         parser config with <solrQueryParser defaultOperator="AND"/> further down in this file.  Use 
         OR if you would like to optimize for recall (default).
    -->
    <fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer>
            <!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)

                 Kuromoji has a search mode (default) that does segmentation useful for search.  A heuristic
                 is used to segment compounds into its parts and the compound itself is kept as synonym.

                 Valid values for attribute mode are:
                    normal: regular segmentation
                    search: segmentation useful for search with synonyms compounds (default)
                  extended: same as search mode, but unigrams unknown words (experimental)

                 For some applications it might be good to use search mode for indexing and normal mode for
                 queries to reduce recall and prevent parts of compounds from being matched and highlighted.
                 Use <analyzer type="index"> and <analyzer type="query"> for this and mode normal in query.

                 Kuromoji also has a convenient user dictionary feature that allows overriding the statistical
                 model with your own entries for segmentation, part-of-speech tags and readings without a need
                 to specify weights.  Notice that user dictionaries have not been subject to extensive testing.

                 User dictionary attributes are:
                           userDictionary: user dictionary filename
                   userDictionaryEncoding: user dictionary encoding (default is UTF-8)

                 See lang/userdict_ja.txt for a sample user dictionary file.

                 Punctuation characters are discarded by default.  Use discardPunctuation="false" to keep them.

                 See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support.
              -->
            <!--<tokenizer class="solr.JapaneseTokenizerFactory" mode="search"/>-->
            <tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>
            <!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->
            <filter class="solr.JapaneseBaseFormFilterFactory"/>
            <!-- Removes tokens with certain part-of-speech tags -->
            <filter class="solr.JapanesePartOfSpeechStopFilterFactory" tags="lang/stoptags_ja.txt" />
            <!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->
            <filter class="solr.CJKWidthFilterFactory"/>
            <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ja.txt" />
            <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
            <filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
            <!-- Lower-cases romaji characters -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>



    <!-- Similarity is the scoring routine for each document vs. a query.
         A custom Similarity or SimilarityFactory may be specified here, but
         the default is fine for most applications.
         For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
      -->
    <!--
       <similarity class="com.example.solr.CustomSimilarityFactory">
         <str name="paramkey">param value</str>
       </similarity>
      -->

</schema>
